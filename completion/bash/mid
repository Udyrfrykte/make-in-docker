#! /bin/bash

_mid_run()
{
  local cur=${COMP_WORDS[COMP_CWORD]}
  local prev_args=("${COMP_WORDS[@]:1:COMP_CWORD-1}")
  local state='zero'
  local index=0

  for arg in "${prev_args[@]}"; do
    index=$(( index + 1 ))
    if [ "$state" == 'zero' ]; then
      case "$arg" in
        --help)
          return
          ;;
        --entrypoint)
          state='entrypoint'
          ;;
        *)
          return
          ;;
      esac
    else
      state='zero'
      continue
    fi
  done

  case "$state" in
    zero)
      if [ -z "$cur" ]; then
        COMPREPLY=( $(compgen -W "--help --entrypoint <ARGUMENTS>" -- $cur) )
      elif [ "${cur:0:1}" == '-' ]; then
        COMPREPLY=( $(compgen -W "--help --entrypoint" -- $cur) )
      fi
      ;;
    entrypoint)
      ;;
    mountpoint)
      ;;
    *)
      ;;
  esac

  return
}

_mid_norun()
{
  COMPREPLY=( $(compgen -W "Â  --help" -- $cur) )
  return
}

_mid()
{
  COMPREPLY=()

  local cur=${COMP_WORDS[COMP_CWORD]}
  local prev_args=("${COMP_WORDS[@]:1:COMP_CWORD-1}")
  local state='zero'
  local index=0

  for arg in "${prev_args[@]}"; do
    index=$(( index + 1 ))
    if [ "$state" == 'zero' ]; then
      case "$arg" in
        --help)
          return
          ;;
        --directory)
          state='directory'
          ;;
        --prefix)
          state='prefix'
          ;;
        build|export)
          COMP_WORDS=("${COMP_WORDS[@]:index}")
          COMP_CWORD=$(( COMP_CWORD - index ))
          _mid_norun
          return
          ;;
        make|run)
          COMP_WORDS=("${COMP_WORDS[@]:index}")
          COMP_CWORD=$(( COMP_CWORD - index ))
          _mid_run
          return
          ;;
        *)
          return
          ;;
      esac
    else
      state='zero'
      continue
    fi
  done

  case "$state" in
    zero)
      if [ "${cur:0:1}" == '-' ]; then
        COMPREPLY=( $(compgen -W "--help --directory --prefix" -- $cur) )
      else
        COMPREPLY=( $(compgen -W "build export make run" -- $cur) )
      fi
      ;;
    directory)
      # check size and add same with . if exactly one if more than 1 possibility,
      # check for a partial completion, if none is found, only output basenames.
      # For now returning basenames causes issues (when there is a shared prefix among
      # all completion proposal - the basenames in our case - the whole argument is
      # replaced with it...)
      COMPREPLY=( $(compgen -S / -d -- $cur) )
      if [ "${#COMPREPLY[@]}" -eq 1 ]; then
        COMPREPLY+=( "${COMPREPLY[0]}." )
      fi
      ;;
    prefix)
      ;;
    *)
      ;;
  esac

  return
}
complete -F _mid mid
